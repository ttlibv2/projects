@use 'sass:math';
@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

.p-chips {
    &:not(.p-disabled):hover {
        .p-chips-multiple-container {
            border-color: cfg.$inputHoverBorderColor;
        }
    }

    &:not(.p-disabled).p-focus {
        .p-chips-multiple-container {
            @include util.focused-input();
        }
    }

    .p-chips-multiple-container {
        padding: math.div(nth(cfg.$inputPadding, 1), 2) nth(cfg.$inputPadding, 2);
        gap: cfg.$inlineSpacing;

        .p-chips-token {
            padding: math.div(nth(cfg.$inputPadding, 1), 2) nth(cfg.$inputPadding, 2);
            margin-right: cfg.$inlineSpacing;
            background: cfg.$chipBg;
            color: cfg.$chipTextColor;
            border-radius: cfg.$chipBorderRadius;

            &.p-focus {
                background: cfg.$chipFocusBg;
                color: cfg.$chipFocusTextColor;
            }

            .p-chips-token-icon {
                margin-left: cfg.$inlineSpacing;
            }
        }

        .p-chips-input-token {
            padding: math.div(nth(cfg.$inputPadding, 1), 2) 0;
                
            input {
                font-family: var(--font-family);
                font-feature-settings: var(--font-feature-settings, normal);
                font-size: cfg.$inputTextFontSize;
                color: cfg.$textColor;
                padding: 0;
                margin: 0;
            }
        }
    }
}

p-chips.ng-dirty.ng-invalid > .p-chips > .p-inputtext {
    @include util.invalid-input();
}

p-chips.p-chips-clearable {
    .p-inputtext {
        padding-right: nth(cfg.$inputPadding, 2) + cfg.$primeIconFontSize;
    }

    .p-chips-clear-icon {
        color: cfg.$inputIconColor;
        right: nth(cfg.$inputPadding, 2);
    } 
}