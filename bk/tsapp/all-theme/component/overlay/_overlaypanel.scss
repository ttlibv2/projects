@use 'sass:math';
@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

.p-overlaypanel {
    background: cfg.$overlayContentBg;
    color: cfg.$panelContentTextColor;
    border: cfg.$overlayContentBorder;
    border-radius: cfg.$borderRadius;
    box-shadow: cfg.$overlayContainerShadow;

    .p-overlaypanel-content {
        padding: cfg.$panelContentPadding;
    }

    .p-overlaypanel-close {
        background: cfg.$buttonBg;
        color: cfg.$buttonTextColor;
        width: cfg.$actionIconWidth;
        height: cfg.$actionIconHeight;
        transition: cfg.$actionIconTransition;
        border-radius: cfg.$actionIconBorderRadius;
        position: absolute;
        top: math.div(-1 * cfg.$actionIconWidth, 2);
        right: math.div(-1 * cfg.$actionIconWidth, 2);

        &:enabled:hover {
            background: cfg.$buttonHoverBg;
            color: cfg.$buttonTextHoverColor;
        }
    }

    &:after {
        border-style: solid;
        border-color: rgba(cfg.$overlayContentBg, 0);
        border-bottom-color: cfg.$overlayContentBg;
    }

    &:before {
        border: solid transparent;

        @if (nth(cfg.$overlayContentBorder, 2) == 'none') {
            border-color: rgba(cfg.$overlayContentBg, 0);
            border-bottom-color: scale-color(cfg.$overlayContentBg, $lightness: -5%);
        }
        @else {
            border-color: rgba(nth(cfg.$overlayContentBorder, 3), 0);
            border-bottom-color: scale-color(nth(cfg.$overlayContentBorder, 3), $lightness: -5%);
        }
    }

    &.p-overlaypanel-flipped {
        &:after {
            border-top-color: cfg.$overlayContentBg;
        }

        &:before {
            @if (nth(cfg.$overlayContentBorder, 2) == 'none') {
                border-top-color: cfg.$overlayContentBg;
            }
            @else {
                border-top-color: nth(cfg.$overlayContentBorder, 3);
            }
        }
    }
}
