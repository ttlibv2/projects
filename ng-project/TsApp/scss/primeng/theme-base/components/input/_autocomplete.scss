@use 'sass:math';

$prefix: 'p-autocomplete';

.#{$prefix} {
    &-loader {
        right: nth($inputPadding, 2);
    }

    &-dd {
        .#{$prefix}-loader {
            right: nth($inputPadding, 2) + $buttonIconOnlyWidth;
        }
    }

    &:not(.p-disabled):hover {
        .#{$prefix}-multiple-container {
            border-color: $inputHoverBorderColor;
        }
    }

    &:not(.p-disabled).p-focus {
        .#{$prefix}-multiple-container {
            @include focused-input();
        }
    }

    &-multiple-container {
        padding: math.div(nth($inputPadding, 1), 2) nth($inputPadding, 2);
        gap: $inlineSpacing;

        .#{$prefix}-input-token {
            padding: math.div(nth($inputPadding, 1), 2) 0;

            input {
                font-family: var(--font-family);
                font-feature-settings: var(--font-feature-settings, normal);
                font-size: $inputTextFontSize;
                color: $textColor;
                padding: 0;
                margin: 0;
            }
        }

        .#{$prefix}-token {
            padding: math.div(nth($inputPadding, 1), 2) nth($inputPadding, 2);
            background: $chipBg;
            color: $chipTextColor;
            border-radius: $chipBorderRadius;

            .#{$prefix}-token-icon {
                margin-left: $inlineSpacing;
            }

            &.p-focus {
                background: $chipFocusBg;
                color: $chipFocusTextColor;
            }
        }
    }

    &.p-invalid.p-component>.p-inputtext {
        @include invalid-input();
    }

    &-panel {
        background: $inputOverlayBg;
        color: $inputListTextColor;
        border: $inputOverlayBorder;
        border-radius: $borderRadius;
        box-shadow: $inputOverlayShadow;

        .#{$prefix}-items {
            padding: $inputListPadding;

            .#{$prefix}-item {
                margin: $inputListItemMargin;
                padding: $inputListItemPadding;
                border: $inputListItemBorder;
                color: $inputListItemTextColor;
                background: $inputListItemBg;
                transition: $listItemTransition;
                border-radius: $inputListItemBorderRadius;

                &:first-child {
                    margin-top: 0;
                }

                &.p-highlight {
                    color: $highlightTextColor;
                    background: $highlightBg;

                    &.p-focus {
                        background: $highlightFocusBg;
                    }
                }

                &:not(.p-highlight):not(.p-disabled) {
                    &.p-focus {
                        color: $inputListItemTextFocusColor;
                        background: $inputListItemFocusBg;
                    }

                    &:hover {
                        color: $inputListItemTextHoverColor;
                        background: $inputListItemHoverBg;
                    }
                }
            }

            .#{$prefix}-item-group {
                margin: $submenuHeaderMargin;
                padding: $submenuHeaderPadding;
                color: $submenuHeaderTextColor;
                background: $submenuHeaderBg;
                font-weight: $submenuHeaderFontWeight;
            }

            .#{$prefix}-empty-message {
                padding: $inputListItemPadding;
                color: $inputListItemTextColor;
                background: $inputListItemBg;
            }
        }
    }
}



#{$prefix} {
    &.ng-dirty.ng-invalid>.#{$prefix}>.p-inputtext {
        @include invalid-input();
    }

    &.#{$prefix}-clearable {
        .p-inputtext {
            padding-right: nth($inputPadding, 2) * 2 + $primeIconFontSize;
        }

        .#{$prefix}-clear-icon {
            color: $inputIconColor;
            right: nth($inputPadding, 2);
        }
    }

    &.#{$prefix}-clearable .#{$prefix}-dd {
        .#{$prefix}-clear-icon {
            color: $inputIconColor;
            right: $buttonIconOnlyWidth + nth($inputPadding, 2);
        }
    }
}