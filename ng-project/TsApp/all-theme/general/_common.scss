@use "../setting/config"as cfg;
@use "../setting/mixins"as util;

* {
    box-sizing: border-box;
}

.p {

    &-component {
        font-family          : var(--font-family), serif;
        font-feature-settings: var(--font-feature-settings, normal);
        font-size            : cfg.$fontSize;
        font-weight          : cfg.$fontWeight;

        &-overlay {
            background-color   : cfg.$maskBg;
            transition-duration: cfg.$transitionDuration;

            &-enter {
                animation: p-component-overlay-enter-animation 150ms forwards;
            }

            &-leave {
                animation: p-component-overlay-leave-animation 150ms forwards;
            }
        }

        &:disabled {
            opacity: cfg.$disabledOpacity;
        }
    }

    &-disabled {
        opacity: cfg.$disabledOpacity;
    }

    &error {
        color: cfg.$errorColor;
    }

    &-text-secondary {
        color: cfg.$textSecondaryColor;
    }

    &-link {
        font-family          : var(--font-family), serif;
        font-feature-settings: var(--font-feature-settings, normal);
        font-size            : cfg.$fontSize;
        border-radius        : cfg.$borderRadius;

        &:focus-visible {
            @include util.focused();
        }
    }

}

.pi {
    font-size: cfg.$primeIconFontSize;

    &-icon {
        width : cfg.$primeIconFontSize;
        height: cfg.$primeIconFontSize;
    }
}

ul {
    padding-left: 0;
    list-style-type: none;
    margin-bottom: 0;
}


















@keyframes p-component-overlay-enter-animation {
    from {
        background-color: transparent;
    }

    to {
        background-color: var(--maskbg);
    }
}

@keyframes p-component-overlay-leave-animation {
    from {
        background-color: var(--maskbg);
    }

    to {
        background-color: transparent;
    }
}