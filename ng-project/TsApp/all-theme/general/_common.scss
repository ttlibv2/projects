@use "../setting/config" as cfg;
@use "../setting/mixins" as util;

* {
	box-sizing: border-box;
}

.p-component {
    font-family: var(--font-family), serif;
    font-feature-settings: var(--font-feature-settings, normal);
    font-size: cfg.$fontSize;
    font-weight: cfg.$fontWeight;
}

.p-component-overlay {
    background-color: cfg.$maskBg;
    transition-duration: cfg.$transitionDuration;
}

.p-disabled, .p-component:disabled {
    opacity: cfg.$disabledOpacity;
}

.p-error {
    color: cfg.$errorColor;
}

.p-text-secondary {
    color: cfg.$textSecondaryColor;
}

.pi {
    font-size: cfg.$primeIconFontSize;
}

.p-icon {
    width: cfg.$primeIconFontSize;
    height: cfg.$primeIconFontSize;
}

.p-link {
    font-family: var(--font-family), serif;
    font-feature-settings: var(--font-feature-settings, normal);
    font-size: cfg.$fontSize;
    border-radius: cfg.$borderRadius;

    &:focus-visible {
        @include util.focused();
    }
}

.p-component-overlay-enter {
    animation: p-component-overlay-enter-animation 150ms forwards;
}

.p-component-overlay-leave {
    animation: p-component-overlay-leave-animation 150ms forwards;
}

.p-component-overlay {
    @keyframes p-component-overlay-enter-animation {
        from {
            background-color: transparent;
        }
        to {
            background-color: var(--maskbg);
        }
    }

    @keyframes p-component-overlay-leave-animation {
        from {
            background-color: var(--maskbg);
        }
        to {
            background-color: transparent;
        }
    }
}


