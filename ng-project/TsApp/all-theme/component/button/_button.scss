@use "../../setting/config"as cfg;
@use "../../setting/mixins"as util;

$prefixBtn: ".p-button";

#{$prefixBtn} {
  color        : cfg.$buttonTextColor;
  background   : cfg.$buttonBg;
  border       : cfg.$buttonBorder;
  padding      : cfg.$buttonPadding;
  font-size    : cfg.$fontSize;
  transition   : cfg.$formElementTransition;
  border-radius: cfg.$borderRadius;
  outline-color: transparent;

  &:not(:disabled) {
    &:hover {
      background  : cfg.$buttonHoverBg;
      color       : cfg.$buttonTextHoverColor;
      border-color: cfg.$buttonHoverBorderColor;
    }

    &:active {
      background  : cfg.$buttonActiveBg;
      color       : cfg.$buttonTextActiveColor;
      border-color: cfg.$buttonActiveBorderColor;
    }
  }

  &:focus-visible {
    @include util.focused();
  }

  &-outlined {
    background-color: transparent;
    color           : cfg.$buttonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled) {
      &:hover {
        background: rgba(cfg.$buttonBg, cfg.$textButtonHoverBgOpacity);
        color     : cfg.$buttonBg;
        border    : cfg.$outlinedButtonBorder;
      }

      &:active {
        background: rgba(cfg.$buttonBg, cfg.$textButtonActiveBgOpacity);
        color     : cfg.$buttonBg;
        border    : cfg.$outlinedButtonBorder;
      }
    }

    &.p-button-plain {
      color       : cfg.$plainButtonTextColor;
      border-color: cfg.$plainButtonTextColor;

      &:not(:disabled):hover {
        background: cfg.$plainButtonHoverBgColor;
        color     : cfg.$plainButtonTextColor;
      }

      &:not(:disabled):active {
        background: cfg.$plainButtonActiveBgColor;
        color     : cfg.$plainButtonTextColor;
      }
    }
  }

  &-text {
    background-color: transparent;
    color           : cfg.$buttonBg;
    border-color    : transparent;

    &:not(:disabled) {
      &:hover {
        background  : rgba(cfg.$buttonBg, cfg.$textButtonHoverBgOpacity);
        color       : cfg.$buttonBg;
        border-color: transparent;
      }

      &:active {
        background  : rgba(cfg.$buttonBg, cfg.$textButtonActiveBgOpacity);
        color       : cfg.$buttonBg;
        border-color: transparent;
      }
    }

    &-plain {
      color: cfg.$plainButtonTextColor;

      &:not(:disabled):hover {
        background: cfg.$plainButtonHoverBgColor;
        color     : cfg.$plainButtonTextColor;
      }

      &:not(:disabled):active {
        background: cfg.$plainButtonActiveBgColor;
        color     : cfg.$plainButtonTextColor;
      }
    }
  }

  &-label {
    transition-duration: cfg.$transitionDuration;
    white-space: nowrap;
  }

  &-icon {
    &-left {
      margin-right: cfg.$inlineSpacing;
    }

    &-right {
      margin-left: cfg.$inlineSpacing;
    }

    &-bottom {
      margin-top: cfg.$inlineSpacing;
    }

    &-top {
      margin-bottom: cfg.$inlineSpacing;
    }

    &-only {
      width  : cfg.$buttonIconOnlyWidth;
      padding: cfg.$buttonIconOnlyPadding;

      .p-button-icon-left,
      .p-button-icon-right {
        margin: 0;
      }

      &.p-button-rounded {
        border-radius: 50%;
        height       : cfg.$buttonIconOnlyWidth;
      }
    }
  }

  &-raised {
    box-shadow: cfg.$raisedButtonShadow;
  }

  &-rounded {
    border-radius: cfg.$roundedButtonBorderRadius;
  }

  .p-badge {
    margin-left     : cfg.$inlineSpacing;
    min-width       : cfg.$fontSize;
    height          : cfg.$fontSize;
    line-height     : cfg.$fontSize;
    color           : cfg.$buttonBg;
    background-color: cfg.$buttonTextColor;
  }




  // form.sm &,
  // &-sm {
  //   // @include util.scaledFontSize(cfg.$fontSize, cfg.$scaleSM);
  //   @include util.scaledPadding(cfg.$buttonPadding, cfg.$scaleSM);

  //   // .p-button-icon {
  //   //@include util.scaledFontSize(cfg.$primeIconFontSize, cfg.$scaleSM);
  //   //  }
  // }

  // form.lg &,
  // &-lg {
  //   //@include util.scaledFontSize(cfg.$fontSize, cfg.$scaleLG);
  //   @include util.scaledPadding(cfg.$buttonPadding, cfg.$scaleLG);

  //   //.p-button-icon {
  //   // @include util.scaledFontSize(cfg.$primeIconFontSize, cfg.$scaleLG);
  //   // }
  // }

  &-loading-label-only {
    .p-button-label {
      margin-left: cfg.$inlineSpacing;
    }

    .p-button-loading-icon {
      margin-right: 0;
    }
  }

  .p-fluid & {
    width : 100%;
    height: 100%;

    &-icon-only {
      width: cfg.$buttonIconOnlyWidth;
    }

    &-group {
      display: flex;

      .p-button {
        flex: 1;
      }
    }
  }
}

.p-button.p-button-primary,
.p-button-group.p-button-primary>.p-button,
.p-splitbutton.p-button-primary>.p-button {
  color     : cfg.$primaryButtonTextColor;
  background: cfg.$primaryButtonBg;
  border    : cfg.$primaryButtonBorder;

  &:not(:disabled):hover {
    background  : cfg.$primaryButtonHoverBg;
    color       : cfg.$primaryButtonTextHoverColor;
    border-color: cfg.$primaryButtonHoverBorderColor;
  }

  &:not(:disabled):focus {
    box-shadow: cfg.$primaryButtonFocusShadow;
  }

  &:not(:disabled):active {
    background  : cfg.$primaryButtonActiveBg;
    color       : cfg.$primaryButtonTextActiveColor;
    border-color: cfg.$primaryButtonActiveBorderColor;
  }

  &-outlined {
    background-color: transparent;
    color           : cfg.$primaryButtonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled):hover {
      background: rgba(cfg.$primaryButtonBg, cfg.$textButtonHoverBgOpacity);
      color     : cfg.$primaryButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }

    &:not(:disabled):active {
      background: rgba(cfg.$primaryButtonBg, cfg.$textButtonActiveBgOpacity);
      color     : cfg.$primaryButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }
  }

  &.p-button-text {
    background-color: transparent;
    color           : cfg.$primaryButtonBg;
    border-color    : transparent;

    &:not(:disabled):hover {
      background  : rgba(cfg.$primaryButtonBg, cfg.$textButtonHoverBgOpacity);
      border-color: transparent;
      color       : cfg.$primaryButtonBg;
    }

    &:not(:disabled):active {
      background  : rgba(cfg.$primaryButtonBg, cfg.$textButtonActiveBgOpacity);
      border-color: transparent;
      color       : cfg.$primaryButtonBg;
    }
  }
}

.p-button.p-button-secondary,
.p-button-group.p-button-secondary>.p-button,
.p-splitbutton.p-button-secondary>.p-button {
  color     : cfg.$secondaryButtonTextColor;
  background: cfg.$secondaryButtonBg;
  border    : cfg.$secondaryButtonBorder;

  &:not(:disabled):hover {
    background  : cfg.$secondaryButtonHoverBg;
    color       : cfg.$secondaryButtonTextHoverColor;
    border-color: cfg.$secondaryButtonHoverBorderColor;
  }

  &:not(:disabled):focus {
    box-shadow: cfg.$secondaryButtonFocusShadow;
  }

  &:not(:disabled):active {
    background  : cfg.$secondaryButtonActiveBg;
    color       : cfg.$secondaryButtonTextActiveColor;
    border-color: cfg.$secondaryButtonActiveBorderColor;
  }

  &-outlined {
    background-color: transparent;
    color           : cfg.$secondaryButtonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled):hover {
      background: rgba(cfg.$secondaryButtonBg, cfg.$textButtonHoverBgOpacity);
      color     : cfg.$secondaryButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }

    &:not(:disabled):active {
      background: rgba(cfg.$secondaryButtonBg, cfg.$textButtonActiveBgOpacity);
      color     : cfg.$secondaryButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }
  }

  &.p-button-text {
    background-color: transparent;
    color           : cfg.$secondaryButtonBg;
    border-color    : transparent;

    &:not(:disabled):hover {
      background  : rgba(cfg.$secondaryButtonBg, cfg.$textButtonHoverBgOpacity);
      border-color: transparent;
      color       : cfg.$secondaryButtonBg;
    }

    &:not(:disabled):active {
      background  : rgba(cfg.$secondaryButtonBg, cfg.$textButtonActiveBgOpacity);
      border-color: transparent;
      color       : cfg.$secondaryButtonBg;
    }
  }
}

.p-button.p-button-info,
.p-button-group.p-button-info>.p-button,
.p-splitbutton.p-button-info>.p-button {
  color     : cfg.$infoButtonTextColor;
  background: cfg.$infoButtonBg;
  border    : cfg.$infoButtonBorder;

  &:not(:disabled):hover {
    background  : cfg.$infoButtonHoverBg;
    color       : cfg.$infoButtonTextHoverColor;
    border-color: cfg.$infoButtonHoverBorderColor;
  }

  &:not(:disabled):focus {
    box-shadow: cfg.$infoButtonFocusShadow;
  }

  &:not(:disabled):active {
    background  : cfg.$infoButtonActiveBg;
    color       : cfg.$infoButtonTextActiveColor;
    border-color: cfg.$infoButtonActiveBorderColor;
  }

  &.p-button-outlined {
    background-color: transparent;
    color           : cfg.$infoButtonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled):hover {
      background: rgba(cfg.$infoButtonBg, cfg.$textButtonHoverBgOpacity);
      color     : cfg.$infoButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }

    &:not(:disabled):active {
      background: rgba(cfg.$infoButtonBg, cfg.$textButtonActiveBgOpacity);
      color     : cfg.$infoButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }
  }

  &.p-button-text {
    background-color: transparent;
    color           : cfg.$infoButtonBg;
    border-color    : transparent;

    &:not(:disabled):hover {
      background  : rgba(cfg.$infoButtonBg, cfg.$textButtonHoverBgOpacity);
      border-color: transparent;
      color       : cfg.$infoButtonBg;
    }

    &:not(:disabled):active {
      background  : rgba(cfg.$infoButtonBg, cfg.$textButtonActiveBgOpacity);
      border-color: transparent;
      color       : cfg.$infoButtonBg;
    }
  }
}

.p-button.p-button-success,
.p-button-group.p-button-success>.p-button,
.p-splitbutton.p-button-success>.p-button {
  color     : cfg.$successButtonTextColor;
  background: cfg.$successButtonBg;
  border    : cfg.$successButtonBorder;

  &:not(:disabled):hover {
    background  : cfg.$successButtonHoverBg;
    color       : cfg.$successButtonTextHoverColor;
    border-color: cfg.$successButtonHoverBorderColor;
  }

  &:not(:disabled):focus {
    box-shadow: cfg.$successButtonFocusShadow;
  }

  &:not(:disabled):active {
    background  : cfg.$successButtonActiveBg;
    color       : cfg.$successButtonTextActiveColor;
    border-color: cfg.$successButtonActiveBorderColor;
  }

  &.p-button-outlined {
    background-color: transparent;
    color           : cfg.$successButtonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled):hover {
      background: rgba(cfg.$successButtonBg, cfg.$textButtonHoverBgOpacity);
      color     : cfg.$successButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }

    &:not(:disabled):active {
      background: rgba(cfg.$successButtonBg, cfg.$textButtonActiveBgOpacity);
      color     : cfg.$successButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }
  }

  &.p-button-text {
    background-color: transparent;
    color           : cfg.$successButtonBg;
    border-color    : transparent;

    &:not(:disabled):hover {
      background  : rgba(cfg.$successButtonBg, cfg.$textButtonHoverBgOpacity);
      border-color: transparent;
      color       : cfg.$successButtonBg;
    }

    &:not(:disabled):active {
      background  : rgba(cfg.$successButtonBg, cfg.$textButtonActiveBgOpacity);
      border-color: transparent;
      color       : cfg.$successButtonBg;
    }
  }
}

.p-button.p-button-warning,
.p-button-group.p-button-warning>.p-button,
.p-splitbutton.p-button-warning>.p-button {
  color     : cfg.$warningButtonTextColor;
  background: cfg.$warningButtonBg;
  border    : cfg.$warningButtonBorder;

  &:not(:disabled):hover {
    background  : cfg.$warningButtonHoverBg;
    color       : cfg.$warningButtonTextHoverColor;
    border-color: cfg.$warningButtonHoverBorderColor;
  }

  &:not(:disabled):focus {
    box-shadow: cfg.$warningButtonFocusShadow;
  }

  &:not(:disabled):active {
    background  : cfg.$warningButtonActiveBg;
    color       : cfg.$warningButtonTextActiveColor;
    border-color: cfg.$warningButtonActiveBorderColor;
  }

  &.p-button-outlined {
    background-color: transparent;
    color           : cfg.$warningButtonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled):hover {
      background: rgba(cfg.$warningButtonBg, cfg.$textButtonHoverBgOpacity);
      color     : cfg.$warningButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }

    &:not(:disabled):active {
      background: rgba(cfg.$warningButtonBg, cfg.$textButtonActiveBgOpacity);
      color     : cfg.$warningButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }
  }

  &.p-button-text {
    background-color: transparent;
    color           : cfg.$warningButtonBg;
    border-color    : transparent;

    &:not(:disabled):hover {
      background  : rgba(cfg.$warningButtonBg, cfg.$textButtonHoverBgOpacity);
      border-color: transparent;
      color       : cfg.$warningButtonBg;
    }

    &:not(:disabled):active {
      background  : rgba(cfg.$warningButtonBg, cfg.$textButtonActiveBgOpacity);
      border-color: transparent;
      color       : cfg.$warningButtonBg;
    }
  }
}

.p-button.p-button-help,
.p-button-group.p-button-help>.p-button,
.p-splitbutton.p-button-help>.p-button {
  color     : cfg.$helpButtonTextColor;
  background: cfg.$helpButtonBg;
  border    : cfg.$helpButtonBorder;

  &:not(:disabled):hover {
    background  : cfg.$helpButtonHoverBg;
    color       : cfg.$helpButtonTextHoverColor;
    border-color: cfg.$helpButtonHoverBorderColor;
  }

  &:not(:disabled):focus {
    box-shadow: cfg.$helpButtonFocusShadow;
  }

  &:not(:disabled):active {
    background  : cfg.$helpButtonActiveBg;
    color       : cfg.$helpButtonTextActiveColor;
    border-color: cfg.$helpButtonActiveBorderColor;
  }

  &.p-button-outlined {
    background-color: transparent;
    color           : cfg.$helpButtonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled):hover {
      background: rgba(cfg.$helpButtonBg, cfg.$textButtonHoverBgOpacity);
      color     : cfg.$helpButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }

    &:not(:disabled):active {
      background: rgba(cfg.$helpButtonBg, cfg.$textButtonActiveBgOpacity);
      color     : cfg.$helpButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }
  }

  &.p-button-text {
    background-color: transparent;
    color           : cfg.$helpButtonBg;
    border-color    : transparent;

    &:not(:disabled):hover {
      background  : rgba(cfg.$helpButtonBg, cfg.$textButtonHoverBgOpacity);
      border-color: transparent;
      color       : cfg.$helpButtonBg;
    }

    &:not(:disabled):active {
      background  : rgba(cfg.$helpButtonBg, cfg.$textButtonActiveBgOpacity);
      border-color: transparent;
      color       : cfg.$helpButtonBg;
    }
  }
}

.p-button.p-button-danger,
.p-button-group.p-button-danger>.p-button,
.p-splitbutton.p-button-danger>.p-button {
  color     : cfg.$dangerButtonTextColor;
  background: cfg.$dangerButtonBg;
  border    : cfg.$dangerButtonBorder;

  &:not(:disabled):hover {
    background  : cfg.$dangerButtonHoverBg;
    color       : cfg.$dangerButtonTextHoverColor;
    border-color: cfg.$dangerButtonHoverBorderColor;
  }

  &:not(:disabled):focus {
    box-shadow: cfg.$dangerButtonFocusShadow;
  }

  &:not(:disabled):active {
    background  : cfg.$dangerButtonActiveBg;
    color       : cfg.$dangerButtonTextActiveColor;
    border-color: cfg.$dangerButtonActiveBorderColor;
  }

  &.p-button-outlined {
    background-color: transparent;
    color           : cfg.$dangerButtonBg;
    border          : cfg.$outlinedButtonBorder;

    &:not(:disabled):hover {
      background: rgba(cfg.$dangerButtonBg, cfg.$textButtonHoverBgOpacity);
      color     : cfg.$dangerButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }

    &:not(:disabled):active {
      background: rgba(cfg.$dangerButtonBg, cfg.$textButtonActiveBgOpacity);
      color     : cfg.$dangerButtonBg;
      border    : cfg.$outlinedButtonBorder;
    }
  }

  &.p-button-text {
    background-color: transparent;
    color           : cfg.$dangerButtonBg;
    border-color    : transparent;

    &:not(:disabled):hover {
      background  : rgba(cfg.$dangerButtonBg, cfg.$textButtonHoverBgOpacity);
      border-color: transparent;
      color       : cfg.$dangerButtonBg;
    }

    &:not(:disabled):active {
      background  : rgba(cfg.$dangerButtonBg, cfg.$textButtonActiveBgOpacity);
      border-color: transparent;
      color       : cfg.$dangerButtonBg;
    }
  }
}

.p-button.p-button-link {
  color     : cfg.$linkButtonColor;
  background: transparent;
  border    : transparent;

  &:not(:disabled):hover {
    background  : transparent;
    color       : cfg.$linkButtonHoverColor;
    border-color: transparent;

    .p-button-label {
      text-decoration: cfg.$linkButtonTextHoverDecoration;
    }
  }

  &:not(:disabled):focus {
    background  : transparent;
    box-shadow  : cfg.$linkButtonFocusShadow;
    border-color: transparent;
  }

  &:not(:disabled):active {
    background  : transparent;
    color       : cfg.$linkButtonColor;
    border-color: transparent;
  }
}

@if variable-exists(contrastButtonTextColor) {

  .p-button.p-button-contrast,
  .p-button-group.p-button-contrast>.p-button,
  .p-splitbutton.p-button-contrast>.p-button {
    color     : cfg.$contrastButtonTextColor;
    background: cfg.$contrastButtonBg;
    border    : cfg.$contrastButtonBorder;

    &:not(:disabled):hover {
      background  : cfg.$contrastButtonHoverBg;
      color       : cfg.$contrastButtonTextHoverColor;
      border-color: cfg.$contrastButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$contrastButtonFocusShadow;
    }

    &:not(:disabled):active {
      background  : cfg.$contrastButtonActiveBg;
      color       : cfg.$contrastButtonTextActiveColor;
      border-color: cfg.$contrastButtonActiveBorderColor;
    }

    &.p-button-outlined {
      background-color: transparent;
      color           : cfg.$contrastButtonBg;
      border          : cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$contrastButtonBg, cfg.$textButtonHoverBgOpacity);
        color     : cfg.$contrastButtonBg;
        border    : cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$contrastButtonBg, cfg.$textButtonActiveBgOpacity);
        color     : cfg.$contrastButtonBg;
        border    : cfg.$outlinedButtonBorder;
      }
    }

    &.p-button-text {
      background-color: transparent;
      color           : cfg.$contrastButtonBg;
      border-color    : transparent;

      &:not(:disabled):hover {
        background  : rgba(cfg.$contrastButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color       : cfg.$contrastButtonBg;
      }

      &:not(:disabled):active {
        background  : rgba(cfg.$contrastButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color       : cfg.$contrastButtonBg;
      }
    }
  }
}


/// button_size
/// 

// @if variable-exists($name: scales) {
@each $key,
$paddingVal in cfg.$paddingScales {

  %css-#{$key} {
    //$fontVal: map.get(cfg.$fontScales, $key);
    //@include util.scaledFontSize(cfg.$fontSize, $fontVal);
    @include util.scaledPadding(cfg.$buttonPadding, $paddingVal);
  }

  #{$prefixBtn} {

    &-#{$key} {
      @extend %css-#{$key};
    }

    form.#{$key} & {
      @extend %css-#{$key};
    }


  }


}

// }