@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;
$prefix: ".ts-tag";

.ts-tag {
  display: inline-flex;
  align-items: center;
  gap: 5px;

 // color: cfg.$buttonTextColor;
 // background: cfg.$buttonBg;
 // border: cfg.$buttonBorder;
  padding: 0.15rem 0.5rem;
  font-size: cfg.$fontSize;
  transition: cfg.$formElementTransition;
  border-radius: cfg.$borderRadius;
  border: cfg.$inputBorder;
  outline-color: transparent;
  cursor: default;

  &-text {
    line-height: 1.5;
    -webkit-user-select: none; /* Safari */
    -ms-user-select: none; /* IE 10 and IE 11 */
    user-select: none; /* Standard syntax */
  }

  &-icon {
    line-height: 1.5;
  }

  &-remove-icon {
    line-height: 1.5;
    cursor: pointer;
  }

  &-checkable {
    cursor: pointer;

    &-checked {
      color: cfg.$infoButtonTextColor !important;
      background: cfg.$primaryColor !important;
      border: cfg.$primaryColor !important;
    }
  }

  &-rounded {
    border-radius: cfg.$roundedButtonBorderRadius;
  }

  &-image {
    border-radius: 16px !important;
    padding: 0 0.75rem 0 0 !important;

    img {
      border-radius: 50%;
      width: 2rem;
      height: 2rem;
    }
  }

  &-secondary {
    color: cfg.$secondaryButtonTextColor;
    background: cfg.$secondaryButtonBg;
    border: cfg.$secondaryButtonBorder;

    &:not(:disabled):hover {
      background: cfg.$secondaryButtonHoverBg;
      color: cfg.$secondaryButtonTextHoverColor;
      border-color: cfg.$secondaryButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$secondaryButtonFocusShadow;
    }

    &:not(:disabled):active {
      background: cfg.$secondaryButtonActiveBg;
      color: cfg.$secondaryButtonTextActiveColor;
      border-color: cfg.$secondaryButtonActiveBorderColor;
    }

    &-outlined {
      background-color: transparent;
      color: cfg.$secondaryButtonBg;
      border: cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$secondaryButtonBg, cfg.$textButtonHoverBgOpacity);
        color: cfg.$secondaryButtonBg;
        border: cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$secondaryButtonBg, cfg.$textButtonActiveBgOpacity);
        color: cfg.$secondaryButtonBg;
        border: cfg.$outlinedButtonBorder;
      }
    }

    &-text {
      background-color: transparent;
      color: cfg.$secondaryButtonBg;
      border-color: transparent;

      &:not(:disabled):hover {
        background: rgba(cfg.$secondaryButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color: cfg.$secondaryButtonBg;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$secondaryButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color: cfg.$secondaryButtonBg;
      }
    }
  }

  &-info {
    color: cfg.$infoButtonTextColor;
    background: cfg.$infoButtonBg;
    border: cfg.$infoButtonBorder;

    &:not(:disabled):hover {
      background: cfg.$infoButtonHoverBg;
      color: cfg.$infoButtonTextHoverColor;
      border-color: cfg.$infoButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$infoButtonFocusShadow;
    }

    &:not(:disabled):active {
      background: cfg.$infoButtonActiveBg;
      color: cfg.$infoButtonTextActiveColor;
      border-color: cfg.$infoButtonActiveBorderColor;
    }

    &-outlined {
      background-color: transparent;
      color: cfg.$infoButtonBg;
      border: cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$infoButtonBg, cfg.$textButtonHoverBgOpacity);
        color: cfg.$infoButtonBg;
        border: cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$infoButtonBg, cfg.$textButtonActiveBgOpacity);
        color: cfg.$infoButtonBg;
        border: cfg.$outlinedButtonBorder;
      }
    }

    &-text {
      background-color: transparent;
      color: cfg.$infoButtonBg;
      border-color: transparent;

      &:not(:disabled):hover {
        background: rgba(cfg.$infoButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color: cfg.$infoButtonBg;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$infoButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color: cfg.$infoButtonBg;
      }
    }
  }

  &-success {
    color: cfg.$successButtonTextColor;
    background: cfg.$successButtonBg;
    border: cfg.$successButtonBorder;

    &:not(:disabled):hover {
      background: cfg.$successButtonHoverBg;
      color: cfg.$successButtonTextHoverColor;
      border-color: cfg.$successButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$successButtonFocusShadow;
    }

    &:not(:disabled):active {
      background: cfg.$successButtonActiveBg;
      color: cfg.$successButtonTextActiveColor;
      border-color: cfg.$successButtonActiveBorderColor;
    }

    &-outlined {
      background-color: transparent;
      color: cfg.$successButtonBg;
      border: cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$successButtonBg, cfg.$textButtonHoverBgOpacity);
        color: cfg.$successButtonBg;
        border: cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$successButtonBg, cfg.$textButtonActiveBgOpacity);
        color: cfg.$successButtonBg;
        border: cfg.$outlinedButtonBorder;
      }
    }

    &-text {
      background-color: transparent;
      color: cfg.$successButtonBg;
      border-color: transparent;

      &:not(:disabled):hover {
        background: rgba(cfg.$successButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color: cfg.$successButtonBg;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$successButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color: cfg.$successButtonBg;
      }
    }
  }

  &-warning {
    color: cfg.$warningButtonTextColor;
    background: cfg.$warningButtonBg;
    border: cfg.$warningButtonBorder;

    &:not(:disabled):hover {
      background: cfg.$warningButtonHoverBg;
      color: cfg.$warningButtonTextHoverColor;
      border-color: cfg.$warningButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$warningButtonFocusShadow;
    }

    &:not(:disabled):active {
      background: cfg.$warningButtonActiveBg;
      color: cfg.$warningButtonTextActiveColor;
      border-color: cfg.$warningButtonActiveBorderColor;
    }

    &-outlined {
      background-color: transparent;
      color: cfg.$warningButtonBg;
      border: cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$warningButtonBg, cfg.$textButtonHoverBgOpacity);
        color: cfg.$warningButtonBg;
        border: cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$warningButtonBg, cfg.$textButtonActiveBgOpacity);
        color: cfg.$warningButtonBg;
        border: cfg.$outlinedButtonBorder;
      }
    }

    &-text {
      background-color: transparent;
      color: cfg.$warningButtonBg;
      border-color: transparent;

      &:not(:disabled):hover {
        background: rgba(cfg.$warningButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color: cfg.$warningButtonBg;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$warningButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color: cfg.$warningButtonBg;
      }
    }
  }

  &-help {
    color: cfg.$helpButtonTextColor;
    background: cfg.$helpButtonBg;
    border: cfg.$helpButtonBorder;

    &:not(:disabled):hover {
      background: cfg.$helpButtonHoverBg;
      color: cfg.$helpButtonTextHoverColor;
      border-color: cfg.$helpButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$helpButtonFocusShadow;
    }

    &:not(:disabled):active {
      background: cfg.$helpButtonActiveBg;
      color: cfg.$helpButtonTextActiveColor;
      border-color: cfg.$helpButtonActiveBorderColor;
    }

    &-outlined {
      background-color: transparent;
      color: cfg.$helpButtonBg;
      border: cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$helpButtonBg, cfg.$textButtonHoverBgOpacity);
        color: cfg.$helpButtonBg;
        border: cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$helpButtonBg, cfg.$textButtonActiveBgOpacity);
        color: cfg.$helpButtonBg;
        border: cfg.$outlinedButtonBorder;
      }
    }

    &-text {
      background-color: transparent;
      color: cfg.$helpButtonBg;
      border-color: transparent;

      &:not(:disabled):hover {
        background: rgba(cfg.$helpButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color: cfg.$helpButtonBg;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$helpButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color: cfg.$helpButtonBg;
      }
    }
  }

  &-danger {
    color: cfg.$dangerButtonTextColor;
    background: cfg.$dangerButtonBg;
    border: cfg.$dangerButtonBorder;

    &:not(:disabled):hover {
      background: cfg.$dangerButtonHoverBg;
      color: cfg.$dangerButtonTextHoverColor;
      border-color: cfg.$dangerButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$dangerButtonFocusShadow;
    }

    &:not(:disabled):active {
      background: cfg.$dangerButtonActiveBg;
      color: cfg.$dangerButtonTextActiveColor;
      border-color: cfg.$dangerButtonActiveBorderColor;
    }

    &-outlined {
      background-color: transparent;
      color: cfg.$dangerButtonBg;
      border: cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$dangerButtonBg, cfg.$textButtonHoverBgOpacity);
        color: cfg.$dangerButtonBg;
        border: cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$dangerButtonBg, cfg.$textButtonActiveBgOpacity);
        color: cfg.$dangerButtonBg;
        border: cfg.$outlinedButtonBorder;
      }
    }

    &-text {
      background-color: transparent;
      color: cfg.$dangerButtonBg;
      border-color: transparent;

      &:not(:disabled):hover {
        background: rgba(cfg.$dangerButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color: cfg.$dangerButtonBg;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$dangerButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color: cfg.$dangerButtonBg;
      }
    }
  }

  &-contrast {
    color: cfg.$contrastButtonTextColor;
    background: cfg.$contrastButtonBg;
    border: cfg.$contrastButtonBorder;

    &:not(:disabled):hover {
      background: cfg.$contrastButtonHoverBg;
      color: cfg.$contrastButtonTextHoverColor;
      border-color: cfg.$contrastButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
      box-shadow: cfg.$contrastButtonFocusShadow;
    }

    &:not(:disabled):active {
      background: cfg.$contrastButtonActiveBg;
      color: cfg.$contrastButtonTextActiveColor;
      border-color: cfg.$contrastButtonActiveBorderColor;
    }

    &-outlined {
      background-color: transparent;
      color: cfg.$contrastButtonBg;
      border: cfg.$outlinedButtonBorder;

      &:not(:disabled):hover {
        background: rgba(cfg.$contrastButtonBg, cfg.$textButtonHoverBgOpacity);
        color: cfg.$contrastButtonBg;
        border: cfg.$outlinedButtonBorder;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$contrastButtonBg, cfg.$textButtonActiveBgOpacity);
        color: cfg.$contrastButtonBg;
        border: cfg.$outlinedButtonBorder;
      }
    }

    &-text {
      background-color: transparent;
      color: cfg.$contrastButtonBg;
      border-color: transparent;

      &:not(:disabled):hover {
        background: rgba(cfg.$contrastButtonBg, cfg.$textButtonHoverBgOpacity);
        border-color: transparent;
        color: cfg.$contrastButtonBg;
      }

      &:not(:disabled):active {
        background: rgba(cfg.$contrastButtonBg, cfg.$textButtonActiveBgOpacity);
        border-color: transparent;
        color: cfg.$contrastButtonBg;
      }
    }
  }

}
