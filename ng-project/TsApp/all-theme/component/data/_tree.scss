@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

.p-tree {
	border: cfg.$panelContentBorder;
	background: cfg.$panelContentBg;
	color: cfg.$panelContentTextColor;
	padding: cfg.$panelContentPadding;
	border-radius: cfg.$borderRadius;

	.p-tree-container {
		.p-treenode {
			padding: cfg.$treeNodePadding;
			outline: 0 none;

			&:focus > .p-treenode-content {
				@include util.focused-listitem();
			}

			.p-treenode-content {
				border-radius: cfg.$borderRadius;
				transition: cfg.$listItemTransition;
				padding: cfg.$treeNodeContentPadding;

				.p-tree-toggler {
					margin-right: cfg.$inlineSpacing;
					@include util.action-icon();
				}

				.p-treenode-icon {
					margin-right: cfg.$inlineSpacing;
					color: cfg.$treeNodeIconColor;
				}

				.p-checkbox {
					margin-right: cfg.$inlineSpacing;

					.p-indeterminate {
						.p-checkbox-icon {
							color: cfg.$textColor;
						}
					}

                    &.p-variant-filled {
                        .p-checkbox-box {
                            background-color: cfg.$inputFilledBg;
                
                            &.p-highlight {
                                background: cfg.$checkboxActiveBg;
                            }
                        }
                
                        &:not(.p-disabled) {
                            .p-checkbox-box {
                                &:hover {
                                    background-color: cfg.$inputFilledHoverBg;
                                }
                
                                &.p-highlight:hover {
                                    background: cfg.$checkboxActiveHoverBg;
                                }
                            }
                        }
                    }
				}

				&.p-highlight {
					background: cfg.$highlightBg;
					color: cfg.$highlightTextColor;

					.p-tree-toggler,
					.p-treenode-icon {
						color: cfg.$highlightTextColor;

						&:hover {
							color: cfg.$highlightTextColor;
						}
					}
				}

				&.p-treenode-selectable:not(.p-highlight):hover {
					background: cfg.$inputListItemHoverBg;
					color: cfg.$inputListItemTextHoverColor;
				}

				&.p-treenode-dragover {
					background: cfg.$inputListItemHoverBg;
					color: cfg.$inputListItemTextHoverColor;
				}
			}
		}
	}

	.p-tree-filter-container {
		margin-bottom: cfg.$inlineSpacing;

		.p-tree-filter {
			width: 100%;
			padding-right: nth(cfg.$inputPadding, 2) + cfg.$primeIconFontSize;
		}

		.p-tree-filter-icon {
			right: nth(cfg.$inputPadding, 2);
			color: cfg.$inputIconColor;
		}
	}

	.p-treenode-children {
		padding: cfg.$treeNodeChildrenPadding;
	}

	.p-tree-loading-icon {
		font-size: cfg.$loadingIconFontSize;

		&.p-icon {
			width: cfg.$loadingIconFontSize;
			height: cfg.$loadingIconFontSize;
		}
	}

	.p-treenode-droppoint {
		&.p-treenode-droppoint-active {
			background-color: scale-color(cfg.$highlightBg, $lightness: -20%);
		}
	}

	&.p-tree-horizontal {
		.p-treenode {
			.p-treenode-content {
				border-radius: cfg.$borderRadius;
				border: cfg.$panelContentBorder;
				background-color: cfg.$panelContentBg;
				color: cfg.$panelContentTextColor;
				padding: cfg.$treeNodeContentPadding;
				transition: cfg.$listItemTransition;

				&.p-highlight {
					background-color: cfg.$highlightBg;
					color: cfg.$highlightTextColor;

					.p-treenode-icon {
						color: cfg.$highlightTextColor;
					}
				}

				.p-tree-toggler {
					margin-right: cfg.$inlineSpacing;
				}

				.p-treenode-icon {
					color: cfg.$treeNodeIconColor;
					margin-right: cfg.$inlineSpacing;
				}

				.p-checkbox {
					margin-right: cfg.$inlineSpacing;
				}

				.p-treenode-label:not(.p-highlight):hover {
					background-color: inherit;
					color: inherit;
				}

				&.p-treenode-selectable:not(.p-highlight):hover {
					background: cfg.$inputListItemHoverBg;
					color: cfg.$inputListItemTextHoverColor;
				}

				&:focus {
					@include util.focused();
				}
			}
		}
	}
}
