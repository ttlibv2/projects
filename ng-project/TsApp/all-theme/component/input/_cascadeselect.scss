@use 'sass:math';
@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

.p-cascadeselect {
    background: cfg.$inputBg;
    border: cfg.$inputBorder;
    transition: cfg.$formElementTransition;
    border-radius: cfg.$borderRadius;

    &:not(.p-disabled):hover {
        border-color: cfg.$inputHoverBorderColor;
    }

    &:not(.p-disabled).p-focus {
        @include util.focused-input();
    }

    .p-cascadeselect-label {
        background: transparent;
        border: 0 none;
        padding: cfg.$inputPadding;

        &.p-placeholder {
            color: cfg.$inputPlaceholderTextColor;
        }

        &:enabled:focus {
            outline: 0 none;
            box-shadow: none;
        }
    }

    .p-cascadeselect-trigger {
        background: transparent;
        color: cfg.$inputIconColor;
        width: cfg.$inputGroupAddOnMinWidth;
        border-top-right-radius: cfg.$borderRadius;
        border-bottom-right-radius: cfg.$borderRadius;
    }

    &.p-invalid.p-component {
        @include util.invalid-input();
    }

    &.p-variant-filled {
        background-color: cfg.$inputFilledBg;

        &:enabled:hover {
            background-color: cfg.$inputFilledHoverBg;
        }

        &:enabled:focus {
            background-color: cfg.$inputFilledFocusBg;
        }
    }
}

.p-cascadeselect-panel {
    background: cfg.$inputOverlayBg;
    color: cfg.$inputListTextColor;
    border: cfg.$inputOverlayBorder;
    border-radius: cfg.$borderRadius;
    box-shadow: cfg.$inputOverlayShadow;

    .p-cascadeselect-items {
        padding: cfg.$inputListPadding;

        .p-cascadeselect-item {
            margin: cfg.$inputListItemMargin;
            border: cfg.$inputListItemBorder;
            color: cfg.$inputListItemTextColor;
            background: cfg.$inputListItemBg;
            transition: cfg.$listItemTransition;
            border-radius: cfg.$inputListItemBorderRadius;

            &:first-child {
                margin-top: 0;
            }

            &.p-highlight {
                color: cfg.$highlightTextColor;
                background: cfg.$highlightBg;

                &.p-focus {
                    background: cfg.$highlightFocusBg;
                }
            }

            &:not(.p-highlight):not(.p-disabled) {
                &.p-focus {
                    color: cfg.$inputListItemTextFocusColor;
                    background: cfg.$inputListItemFocusBg;
                }

                &:hover {
                    color: cfg.$inputListItemTextHoverColor;
                    background: cfg.$inputListItemHoverBg;
                }
            }


            .p-cascadeselect-item-content {
                padding: cfg.$inputListItemPadding;
            }

            .p-cascadeselect-group-icon {
                font-size: cfg.$menuitemSubmenuIconFontSize;
            }
        }
    }
}

.p-input-filled {
    .p-cascadeselect {
        background: cfg.$inputFilledBg;

        &:not(.p-disabled):hover {
            background-color: cfg.$inputFilledHoverBg;
        }
    
        &:not(.p-disabled).p-focus {
            background-color: cfg.$inputFilledFocusBg;
        }
    }
}

p-cascadeselect.ng-dirty.ng-invalid > .p-cascadeselect {
    @include util.invalid-input();
}

p-cascadeselect.p-cascadeselect-clearable {
    .p-cascadeselect-label {
        padding-right: nth(cfg.$inputPadding, 2);
    }

    .p-cascadeselect-clear-icon {
        color: cfg.$inputIconColor;
        right: cfg.$inputGroupAddOnMinWidth;
    }
}

.p-overlay-modal {
    .p-cascadeselect-sublist {
        .p-cascadeselect-panel {
            box-shadow: none;
            border-radius: 0;
            padding: math.div(cfg.$inlineSpacing, 2) 0 math.div(cfg.$inlineSpacing, 2) cfg.$inlineSpacing;
        }
    }

    .p-cascadeselect-item-active > .p-cascadeselect-item-content .p-cascadeselect-group-icon {
        transform: rotate(90deg);
    }
}
