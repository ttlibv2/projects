@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;
@use "../../setting/scales" as sc;

@mixin displayFlex($gap: .5rem, $align: stretch) {
    display: flex;
    align-items: $align;
    //column-gap: $gap;
}

$cls: '.ts-inputgroup';

#{$cls} {
    --input-padding: #{cfg.$inputPadding};

    @include displayFlex(var(--input-flex-addon));
    transition: all .3s;

    &-input {
        @include displayFlex(.5rem);
        flex: 1 1 0% !important;
        font-family: cfg.$fontFamily;
        font-feature-settings: cfg.$fontFeatureSettings; // var(--font-feature-settings, normal);
        font-variation-settings: cfg.$fontVariationSettings;
        font-size: cfg.$inputTextFontSize;
        color: cfg.$inputTextColor;
        background: cfg.$inputBg;
        border: cfg.$inputBorder;
        transition: cfg.$formElementTransition;
        appearance: none;
        border-radius: cfg.$borderRadius;
        padding: var(--input-padding);

        &:focus-within {
            @include util.focused-input();
        }

        &:hover {
            border-color: cfg.$inputHoverBorderColor;
        }

        //&:has(input.ng-invalid),
        &:has(.ng-invalid.ng-dirty),
        &.ng-dirty.ng-invalid {
            @include util.invalid-input();
        }

        &.ng-invalid {
            @include util.invalid-input();
        }

        #{$cls}-affix {
            @include displayFlex($align: center);

            .icon,
            .pi {
                cursor: pointer;
            }
        }

        #{$cls}-field {
            @include displayFlex;
            flex: 1 1 0%;

            >* {
                flex: 1 1 0%;
            }

            .p-inputtext,
            .p-dropdown {
                border-width: 0px !important;
                box-shadow: unset !important;
                background: transparent !important;
                padding: 0 !important;
                border-radius: 0!important;

                &:focus,
                &.p-focus {
                    outline-width: 0 !important;
                }

                &:not(.p-password-input) {
                    padding: 0 !important;
                }


            }

            .p-input-icon-right>.p-password-input {
                padding-right: 2rem !important;
            }

            .p-inputnumber {
                width: 100%;
            }

            //calendar
            .p-calendar.p-focus>.p-inputtext {
                outline-width: 0 !important
            }








        }

    }

    &-addon {
        @include displayFlex;

        >* {
            &:not(input) {
                display: contents;
            }

            button {
                padding: var(--input-padding);
            }
        }
    }

    &-compact {
        column-gap: 0 !important;

        #{$cls}-input {
            border-radius: cfg.$borderRadius;

            //exist addon before + after
            &:not(:first-child):not(:last-child) {
                border-radius: 0 !important;
            }

            //only field
            &:has:first-child:has:last-child {
                border-radius: cfg.$borderRadius !important;
            }

            //only addon after
            &:first-child:not(:last-child) {
                border-top-right-radius: 0 !important;
                border-bottom-right-radius: 0 !important;
            }

            //only addon before
            &:not(:first-child) {
                border-top-left-radius: 0 !important;
                border-bottom-left-radius: 0 !important;
            }

        }

        #{$cls}-addon {
            column-gap: 0 !important;

            .p-button,
            .p-inputtext {
                border-radius: 0 !important;
                //border-left-width: 0 !important;
                border-right-width: 0 !important;

                &:not(:hover) {
                    border-left-width: 0 !important;
                }
            }

            &-before {

                >:first-child>.p-button,
                >:first-child:is(.p-inputtext) {
                    border-top-left-radius: cfg.$borderRadius !important;
                    border-bottom-left-radius: cfg.$borderRadius !important;
                    border-left-width: cfg.$borderWidth !important;
                }

                >:not(:last-child)>.p-button,
                >:not(:last-child):is(.p-inputtext) {
                    border-right-width: cfg.$borderWidth !important;
                }

            }

            &-after {

                >:last-child>.p-button,
                >:last-child:is(.p-inputtext) {
                    border-top-right-radius: cfg.$borderRadius !important;
                    border-bottom-right-radius: cfg.$borderRadius !important;
                    border-right-width: cfg.$borderWidth !important;
                }

                > :not(:first-child)>.p-button,
                > :not(:first-child):is(.p-inputtext) {
                    border-left-width: cfg.$borderWidth !important;
                }

            }
        }





    }

    form.sm &,
    &-sm {
        @include util.scaledPaddingSub(--input-padding, cfg.$inputPadding, sc.get-scale-padding(sm));
    }

    form.lg &,
    &-lg {
        @include util.scaledPaddingSub(--input-padding, cfg.$inputPadding, sc.get-scale-padding(lg));
    }

}


// padding: nth($val, 1) * $scale nth($val, 2) * $scale;





// .p-inputgroup1 {
//    // border-radius: cfg.$borderRadius;

//     > .p-component,
//     > .p-inputwrapper > .p-inputtext,
//     > .p-float-label > .p-component {
//         border-radius: 0;
//         margin: 0;

//         + .p-inputgroup-addon {
//             border-left: 0 none;
//         }

//         &:focus {
//             z-index: 1;

//             ~ label {
//                 z-index: 1;
//             }
//         }
//     }

//     &-field {
//         @include displayFlex;
//     }

//     &-affix {
//         @include displayFlex;

//         .icon {
//             cursor: pointer;
//         }
//     }


//     &-addon {
//         background: cfg.$inputGroupBg;
//         color: cfg.$inputGroupTextColor;
//         border-top: cfg.$inputBorder;
//         border-left: cfg.$inputBorder;
//         border-bottom: cfg.$inputBorder;
//         //padding: cfg.$inputPadding;
//         min-width: cfg.$inputGroupAddOnMinWidth;

//         &:last-child {
//             border-right: cfg.$inputBorder;
//         }
//     }

//     &:hover {
//         //border: 1px solid cfg.$inputHoverBorderColor;
//     }


// }

// .p-inputgroup-addon:first-child,
// .p-inputgroup button:first-child,
// .p-inputgroup input:first-child,
// .p-inputgroup > .p-inputwrapper:first-child > .p-component,
// .p-inputgroup > .p-inputwrapper:first-child > .p-component > .p-inputtext{
//     border-top-left-radius: cfg.$borderRadius;
//     border-bottom-left-radius: cfg.$borderRadius;
// }


// .p-inputgroup .p-float-label:first-child input {
//     border-top-left-radius: cfg.$borderRadius;
//     border-bottom-left-radius: cfg.$borderRadius;
// }

// .p-inputgroup-addon:last-child,
// .p-inputgroup button:last-child,
// .p-inputgroup input:last-child,
// .p-inputgroup > .p-inputwrapper:last-child > .p-component,
// .p-inputgroup > .p-inputwrapper:last-child > .p-component > .p-inputtext {
//     border-top-right-radius: cfg.$borderRadius;
//     border-bottom-right-radius: cfg.$borderRadius;
//     border-top-left-radius: 0;
//     border-bottom-left-radius: 0;
//     border-left-width: 0;

// }

// .p-inputgroup .p-float-label:last-child input {
//     border-top-right-radius: cfg.$borderRadius;
//     border-bottom-right-radius: cfg.$borderRadius;
// }

// .p-fluid {
//     .p-inputgroup {
//         .p-button {
//             width: auto;

//             &.p-button-icon-only {
//                 width: cfg.$buttonIconOnlyWidth;
//             }
//         }
//     }
// }