@use "../../setting/config"as cfg;
@use "../../setting/mixins"as util;

$prefix: 'p-dropdown';

.#{$prefix} {
    background   : cfg.$inputBg;
    border       : cfg.$inputBorder;
    transition   : cfg.$formElementTransition;
    border-radius: cfg.$borderRadius;

    &:not(.p-disabled) {
        &:hover {
            border-color: cfg.$inputHoverBorderColor;
        }

        &.p-focus {
            @include util.focused-input();
        }
    }


    &-clearable {
        .#{$prefix}-label {
            padding-right: nth(cfg.$inputPadding, 2) + cfg.$primeIconFontSize;
        }
    }

    &-label {
        background: transparent;

        &.p-inputtext {
            border: 0 none;
        }

        &.p-placeholder {
            color: cfg.$inputPlaceholderTextColor;
        }

        &:focus,
        &:enabled:focus {
            outline   : 0 none;
            box-shadow: none;
        }
    }

    &-trigger {
        background                : transparent;
        color                     : cfg.$inputIconColor;
        width                     : cfg.$inputGroupAddOnMinWidth;
        border-top-right-radius   : cfg.$borderRadius;
        border-bottom-right-radius: cfg.$borderRadius;
    }

    &-clear-icon {
        color: cfg.$inputIconColor;
        right: cfg.$inputGroupAddOnMinWidth;
    }

    &.p-invalid.p-component {
        @include util.invalid-input();
    }

    &.p-variant-filled {
        background-color: cfg.$inputFilledBg;

        &:enabled {
            &:hover {
                background-color: cfg.$inputFilledHoverBg;
            }

            &:focus {
                background-color: cfg.$inputFilledFocusBg;
            }
        }

    }

    &--panel {
        background   : cfg.$inputOverlayBg;
        color        : cfg.$inputListTextColor;
        border       : cfg.$inputOverlayBorder;
        border-radius: cfg.$borderRadius;
        box-shadow   : cfg.$inputOverlayShadow;

        .#{$prefix}-header {
            padding                : cfg.$inputListHeaderPadding;
            border-bottom          : cfg.$inputListHeaderBorder;
            color                  : cfg.$inputListHeaderTextColor;
            background             : cfg.$inputOverlayHeaderBg;
            margin                 : cfg.$inputListHeaderMargin;
            border-top-right-radius: cfg.$borderRadius;
            border-top-left-radius : cfg.$borderRadius;

            .#{$prefix}-filter {
                padding-right: nth(cfg.$inputPadding, 2) + cfg.$primeIconFontSize;
                margin-right : -1 * (nth(cfg.$inputPadding, 2) + cfg.$primeIconFontSize);

                &--icon {
                    right: nth(cfg.$inputPadding, 2);
                    color: cfg.$inputIconColor;
                }

            }
        }

        .#{$prefix}-items {
            padding: cfg.$inputListPadding;

            .#{$prefix}-item {
                margin       : cfg.$inputListItemMargin;
                padding      : cfg.$inputListItemPadding;
                border       : cfg.$inputListItemBorder;
                color        : cfg.$inputListItemTextColor;
                background   : cfg.$inputListItemBg;
                transition   : cfg.$listItemTransition;
                border-radius: cfg.$inputListItemBorderRadius;

                &:first-child {
                    margin-top: 0;
                }

                &.p-highlight {
                    color     : cfg.$highlightTextColor;
                    background: cfg.$highlightBg;

                    &.p-focus {
                        background: cfg.$highlightFocusBg;
                    }
                }

                &:not(.p-highlight):not(.p-disabled) {
                    &.p-focus {
                        color     : cfg.$inputListItemTextFocusColor;
                        background: cfg.$inputListItemFocusBg;
                    }

                    &:hover {
                        color     : cfg.$inputListItemTextHoverColor;
                        background: cfg.$inputListItemHoverBg;
                    }
                }

                &-group {
                    margin     : cfg.$submenuHeaderMargin;
                    padding    : cfg.$submenuHeaderPadding;
                    color      : cfg.$submenuHeaderTextColor;
                    background : cfg.$submenuHeaderBg;
                    font-weight: cfg.$submenuHeaderFontWeight;
                }
            }


            .#{$prefix}-empty-message {
                padding   : cfg.$inputListItemPadding;
                color     : cfg.$inputListItemTextColor;
                background: cfg.$inputListItemBg;
            }
        }
    }

}


.p-input-filled {

    .#{$prefix} {
        background: cfg.$inputFilledBg;

        &:not(.p-disabled):hover {
            background-color: cfg.$inputFilledHoverBg;
        }

        &:not(.p-disabled).p-focus {
            background-color: cfg.$inputFilledFocusBg;

            .p-inputtext {
                background-color: transparent;
            }
        }
    }
}

p-dropdown.ng-dirty.ng-invalid>.p-dropdown {
    @include util.invalid-input();
}