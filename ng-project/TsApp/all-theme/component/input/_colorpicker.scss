@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

$pickerCls: 'ts-colorpicker';
$width: 250px !default;
$handlerSize: 1.2rem; // width + height
$handleBorderWidth: 2px;
$paletteHeight: .75rem;


.p-colorpicker-preview,
.p-fluid .p-colorpicker-preview.p-inputtext {
  width: cfg.$colorPickerPreviewWidth;
  height: cfg.$colorPickerPreviewHeight;
}

.p-colorpicker-panel {
  background: cfg.$colorPickerBg;
  border: cfg.$colorPickerBorder;

  .p-colorpicker-color-handle,
  .p-colorpicker-hue-handle {
    border-color: cfg.$colorPickerHandleColor;
  }
}

.p-colorpicker-overlay-panel {
  box-shadow: cfg.$inputOverlayShadow;
}

.p-inputgroup input.p-colorpicker-preview.p-inputtext:last-child {
  border-top-left-radius: cfg.$borderRadius;
  border-bottom-left-radius: cfg.$borderRadius;
  border-left-width: 1px;
}

.#{$pickerCls} {
  display: inline-block;
 // min-width: $width;

  .ts-color-input {
    width: 100%;
    min-width: 100%;

    &:read-only {
      cursor: pointer;
    }

  }

  .icon-copy:hover {
    color: var(--danger-color);
  }

  &-hidden {
    display: none;
  }

  &-overlay {

    &:before,
    &:after {
      content: none !important;
    }

    .p-overlaypanel-content {
      padding: 0 !important;
    }

  }

  &-panel {
    display: flex;
    flex-direction: column;
    row-gap: 1rem;
    width: $width;
    padding: .5rem;
    border-radius: cfg.$borderRadius;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);

    &-disabled {
      cursor: not-allowed;

      &-alpha {

        .#{$pickerCls}-slider-group {
          justify-content: center;
        }

      }
    }

    &-header {
      display: flex;

      &.no-title {
        justify-content: flex-end;
      }

      &-title {
        flex: 1;
      }

      &-clear {
        flex: 0 0 18px;

        position: relative;
        width: 18px;
        height: 18px;
        overflow: hidden;
        border: cfg.$borderWidth solid cfg.$borderColor;
        border-radius: cfg.$borderRadius;
        cursor: pointer;

        &::after {
          position: absolute;
          top: 0;
          display: block;
          width: 40px;
          height: 2px;
          background-color: #f5222d;
          transform: rotate(-45deg);
          transform-origin: right;
          content: '';
          inset-inline-end: 1px;
        }
      }

    }

    .#{$pickerCls}-block {
      width: 32px;
      height: 32px;
    }
  }

  /** <color-select-view> */
  &-select {
    .#{$pickerCls}-palette {
      min-height: 160px;
      overflow: hidden;
      cursor: crosshair;
    }

    .#{$pickerCls}-handler {
      width: 1rem;
      height: 1rem;      
    }

  }

  /** <color-format-view> */
  &-format {
    display: flex;
    flex-direction: row;
    align-items: center;
    column-gap: .2rem;

    &-select {
      .p-dropdown {
        max-width: 55px;
        min-width: 55px;
        background: transparent !important;
        border-color: transparent !important;
        box-shadow: none;

        &-trigger {
          width: 1.5rem !important;
        }

        &.p-focus {
          outline: none !important;
        }

      }
    }

    &-input {
      flex: 1 1 0%;
      column-gap: .2rem;
      display: flex;

      >.p-element {
        flex: 1 1 0%;
      }

      .p-inputtext {
        width: 100%;
        min-width: 100%;
        border-radius: 0;
      }

      .ts-inputgroup-input {
        border-radius: 0;
      }


      &-hsb,
      &-rgb {
        .ts-inputgroup-input {
          display: none !important;
        }
      }

    }

    &-alpha {

      .p-inputnumber-input {
        width: 48px;
        border-radius: 0;
      }

    }

    .p-inputnumber {

      &-button {
        width: 1rem;

        &:hover {
          background: transparent !important;

          .p-icon-wrapper {
            color: var(--info-color);
          }

        }
      }

      &:not(:hover) {
        .p-inputnumber-button-group {
          display: none;
        }
      }


    }

  }

  /** <color-block-view> */
  &-block {
    position: relative;
    width: 16px;
    height: 16px;
    overflow: hidden;
    cursor: pointer;
    background-image: conic-gradient(rgba(0, 0, 0, 0.06) 0 25%,
        transparent 0 50%,
        rgba(0, 0, 0, 0.06) 0 75%,
        transparent 0);
    background-size: 50% 50%;

    &-inner {
      box-sizing: border-box;
      width: 100%;
      height: 100%;
      border: cfg.$borderWidth solid cfg.$borderColor;
    }

  }

  /** <color-slider-view> */
  &-slider {
    width: 100%;
    //border-radius: cfg.$borderRadius;

    &-hue { margin-top: .15rem;}
    &-alpha { margin-bottom: .15rem;}

    .#{$pickerCls}-palette {
      height: $paletteHeight;
    }

    .#{$pickerCls}-gradient {
      border-radius: $handlerSize;
    }


    &-alpha {
      background-image: conic-gradient(rgba(0, 0, 0, 0.06) 0 25%,
          transparent 0 50%,
          rgba(0, 0, 0, 0.06) 0 75%,
          transparent 0);
      background-size: 8px 8px;
    }

    &-group {
      flex: 1 1 0%;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    &-container {
      display: flex;
      flex-direction: row;
      column-gap: .5rem;
    }
  }

  &-saturation {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: inherit;
  }

  &-handler {
    box-sizing: border-box;
    width: $handlerSize;
    height: $handlerSize;
    border: $handleBorderWidth solid #fff;
    //background: red;
    border-radius: 50%;

    &:focus,
    &:active {
      box-shadow: 0 0 0 0px #ffffff, 0 0 0 2px #1e293b;
      outline: 0 none;
      outline-offset: 0;
    }

  }


}