@use 'sass:math';
@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

.p-autocomplete {

    .p-autocomplete-loader {
        right: nth(cfg.$inputPadding, 2);
    }

    &.p-autocomplete-dd {
        .p-autocomplete-loader {
            right: nth(cfg.$inputPadding, 2) + cfg.$buttonIconOnlyWidth;
        }
    }

    &:not(.p-disabled):hover {
        .p-autocomplete-multiple-container {
            border-color: cfg.$inputHoverBorderColor;
        }
    }

    &:not(.p-disabled).p-focus {
        .p-autocomplete-multiple-container {
            @include util.focused-input();
        }
    }

    .p-autocomplete-multiple-container {
        padding: math.div(nth(cfg.$inputPadding, 1), 2) nth(cfg.$inputPadding, 2);
        gap: cfg.$inlineSpacing;

        .p-autocomplete-input-token {
            padding: math.div(nth(cfg.$inputPadding, 1), 2) 0;

            input {
                font-family: var(--font-family), serif;
                font-feature-settings: var(--font-feature-settings, normal);
                font-size: cfg.$inputTextFontSize;
                color: cfg.$textColor;
                padding: 0;
                margin: 0;
            }
        }

        .p-autocomplete-token {
            padding: math.div(nth(cfg.$inputPadding, 1), 2) nth(cfg.$inputPadding, 2);
            background: cfg.$chipBg;
            color: cfg.$chipTextColor;
            border-radius: cfg.$chipBorderRadius;

            .p-autocomplete-token-icon {
                margin-left: cfg.$inlineSpacing;
            }

            &.p-focus {
                background: cfg.$chipFocusBg;
                color: cfg.$chipFocusTextColor;
            }
        }
    }

    &.p-invalid.p-component > .p-inputtext {
        @include util.invalid-input();
    }
}

.p-autocomplete-panel {
    background: cfg.$inputOverlayBg;
    color: cfg.$inputListTextColor;
    border: cfg.$inputOverlayBorder;
    border-radius: cfg.$borderRadius;
    box-shadow: cfg.$inputOverlayShadow;

    .p-autocomplete-items {
        padding: cfg.$inputListPadding;

        .p-autocomplete-item {
            margin: cfg.$inputListItemMargin;
            padding: cfg.$inputListItemPadding;
            border: cfg.$inputListItemBorder;
            color: cfg.$inputListItemTextColor;
            background: cfg.$inputListItemBg;
            transition: cfg.$listItemTransition;
            border-radius: cfg.$inputListItemBorderRadius;

            &:first-child {
                margin-top: 0;
            }

            &.p-highlight {
                color: cfg.$highlightTextColor;
                background: cfg.$highlightBg;

                &.p-focus {
                    background: cfg.$highlightFocusBg;
                }
            }

            &:not(.p-highlight):not(.p-disabled) {
                &.p-focus {
                    color: cfg.$inputListItemTextFocusColor;
                    background: cfg.$inputListItemFocusBg;
                }

                &:hover {
                    color: cfg.$inputListItemTextHoverColor;
                    background: cfg.$inputListItemHoverBg;
                }
            }
        }

        .p-autocomplete-item-group {
            margin: cfg.$submenuHeaderMargin;
            padding: cfg.$submenuHeaderPadding;
            color: cfg.$submenuHeaderTextColor;
            background: cfg.$submenuHeaderBg;
            font-weight: cfg.$submenuHeaderFontWeight;
        }

        .p-autocomplete-empty-message {
            padding: cfg.$inputListItemPadding;
            color: cfg.$inputListItemTextColor;
            background: cfg.$inputListItemBg;
        }
    }
}

p-autocomplete.ng-dirty.ng-invalid > .p-autocomplete > .p-inputtext {
    @include util.invalid-input();
}

p-autocomplete.p-autocomplete-clearable {
    .p-inputtext {
        padding-right: nth(cfg.$inputPadding, 2) * 2 + cfg.$primeIconFontSize;
    }

    .p-autocomplete-clear-icon {
        color: cfg.$inputIconColor;
        right: nth(cfg.$inputPadding, 2);
    }
}

p-autocomplete.p-autocomplete-clearable .p-autocomplete-dd {
    .p-autocomplete-clear-icon {
        color: cfg.$inputIconColor;
        right: cfg.$buttonIconOnlyWidth + nth(cfg.$inputPadding, 2);
    }
}