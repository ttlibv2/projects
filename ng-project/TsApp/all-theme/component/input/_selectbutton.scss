@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

.p-selectbutton {
    .p-button {
        background: cfg.$toggleButtonBg;
        border: cfg.$toggleButtonBorder;
        color: cfg.$toggleButtonTextColor;
        transition: cfg.$formElementTransition;

        .p-button-icon-left,
        .p-button-icon-right {
            color: cfg.$toggleButtonIconColor;
        }

        &:not(.p-disabled):not(.p-highlight):hover {
            background: cfg.$toggleButtonHoverBg;
            border-color: cfg.$toggleButtonHoverBorderColor;
            color: cfg.$toggleButtonTextHoverColor;

            .p-button-icon-left,
            .p-button-icon-right {
                color: cfg.$toggleButtonIconHoverColor;
            }
        }

        &.p-highlight {
            background: cfg.$toggleButtonActiveBg;
            border-color: cfg.$toggleButtonActiveBorderColor;
            color: cfg.$toggleButtonTextActiveColor;

            .p-button-icon-left,
            .p-button-icon-right {
                color: cfg.$toggleButtonIconActiveColor;
            }

            &:hover {
                background: cfg.$toggleButtonActiveHoverBg;
                border-color: cfg.$toggleButtonActiveHoverBorderColor;
                color: cfg.$toggleButtonTextActiveHoverColor;

                .p-button-icon-left,
                .p-button-icon-right {
                    color: cfg.$toggleButtonIconActiveHoverColor;
                }
            }
        }
    }
}

p-selectbutton.ng-dirty.ng-invalid > .p-selectbutton > .p-button {
    @include util.invalid-input();
}