@use "../../setting/config" as cfg;
@use "../../setting/mixins" as util;

@mixin tsToast() {
  position: fixed;
  min-width: 25rem;
}

@mixin info() {
  --toast-bg: #{cfg.$infoMessageBg};
  --toast-text-color: #{cfg.$infoMessageTextColor};
  --toast-icon-color:#{cfg.$infoMessageIconColor};
  --toast-border-color: #{cfg.$infoMessageBorderColor};
}

@mixin success() {
  --toast-bg: #{cfg.$successMessageBg};
  --toast-text-color: #{cfg.$successMessageTextColor};
  --toast-icon-color:#{cfg.$successMessageIconColor};
  --toast-border-color: #{cfg.$successMessageBorderColor};
}

@mixin help() {
  --toast-bg: #{cfg.$helpMessageBg};
  --toast-text-color: #{cfg.$helpMessageTextColor};
  --toast-icon-color:#{cfg.$helpMessageIconColor};
  --toast-border-color: #{cfg.$helpMessageBorderColor};
}

@mixin warning() {
  --toast-bg: #{cfg.$warningMessageBg};
  --toast-text-color: #{cfg.$warningMessageTextColor};
  --toast-icon-color:#{cfg.$warningMessageIconColor};
  --toast-border-color: #{cfg.$warningMessageBorderColor};
}

@mixin error() {
  --toast-bg: #{cfg.$errorMessageBg};
  --toast-text-color: #{cfg.$errorMessageTextColor};
  --toast-icon-color:#{cfg.$errorMessageIconColor};
  --toast-border-color: #{cfg.$errorMessageBorderColor};
}

.ts-toast {

  &-message {
    margin: cfg.$toastMargin;
    opacity: cfg.$toastOpacity;
    font-size: cfg.$toastFontSize;
    box-shadow: cfg.$toastShadow;
    border-radius: cfg.$borderRadius;
    border: cfg.$messageBorderWidth solid;


    background: var(--toast-bg);
    color: var(--toast-text-color);
    border-color: var(--toast-border-color);

    &:hover {
      box-shadow: 0 0 12px #000;
      opacity: 1;
      cursor: pointer;
    }

    &-header {
      display: flex;
      flex-direction: row;
      padding: cfg.$toastHeaderPadding;
      align-items: center;

      &-title {
        flex: 1 1 auto;
        font-weight: bold;
      }

    }

    &-close {
      cursor: pointer;
      border-radius: cfg.$actionIconBorderRadius;
      transition: cfg.$actionIconTransition;
      padding: cfg.$toastCloseIconPadding;
      background: transparent;
      display: flex;
      align-items: center;

      &:hover {
        background: var(--toast-border-color);
      }

      &:focus-visible {
        @include util.focused();
      }

      > .icon {
        color: var(--toast-icon-color);
        font-size: cfg.$toastCloseIconFontSize;
      }
    }

    &-content {
      padding: cfg.$toastContentPadding;
      display: flex;
      flex-direction: row;
      gap: 1rem;

      &-left {
        display: flex;
        flex-direction: row;
        align-items: center;
      }

      &-center {
        display: flex;
        flex-direction: column;
        flex: 1 1 auto;
        justify-content: center;
      }

      &-right {
        display: flex;
        flex-direction: row;
        align-items: center;
      }


      &-icon > span.icon {
        color: var(--toast-icon-color);
        font-size: cfg.$toastMessageIconFontSize;
      }

      &-summary {

      }
    }

    &-info {@include info();}
    &-success {@include success();}
    &-help {@include help();}
    &-warning {@include warning();}
    &-error {@include error();}
    &-loading {@include info();}

  }

  &-top-right {
    @include tsToast();
    top: 20px;
    right: 20px;
  }

  &-top-left {
    @include tsToast();
    top: 20px;
    left: 20px;
  }

  &-top-center {
    @include tsToast();
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
  }

  &-bottom-left {
    @include tsToast();
    bottom: 20px;
    left: 20px;
  }

  &-bottom-right {
    @include tsToast();
    bottom: 20px;
    right: 20px;
  }

  &-bottom-center {
    @include tsToast();
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
  }

  &-center {
    @include tsToast();
    left: 50%;
    top: 50%;
    min-width: 20vw;
    transform: translate(-50%, -50%);
  }

  &-top-full-width {
    top: 0;
    right: 0;
    width: 100%;
  }

  &-bottom-full-width {
    bottom: 0;
    right: 0;
    width: 100%;
  }
}